
/* MAX: 1 */
int my_abs(int n)
{
  int m;
  klee_make_symbolic(&m, sizeof(int), "m");

  if (n >= 0) {m = n;wcet += 1;}
  else {m = -n;wcet += 1;}
  return m;
}

/* MAX: 1 */
int my_fabs(int n)
{
  int f;
  klee_make_symbolic(&f, sizeof(int), "f");  
  f=0;

  if (n >= 0) {f = n;wcet += 1;}
  else {f = -n;wcet += 1;}
  return f;
}

int my_sin(int rad)
{
  int diff;
  klee_make_symbolic(&diff, sizeof(int), "diff");    
  int app=0;

  int inc = 1;


  while (rad > 2*PI){
      rad -= 2*PI;wcet += 1;}

  while (rad < -2*PI){
      rad += 2*PI;wcet += 1;}
   diff = rad;
   app = diff;
  diff = (diff * (-(rad*rad))) /
     ((2 * inc) * (2 * inc + 1));
  app = app + diff;
  inc++;
  wcet += 5;

  //my_fabs(diff) >= 1
  // Changing it to 100 iterations a.k.a. many iterations
  int i = 0;
  while(i < 100) 
  {
    diff = (diff * (-(rad*rad))) /
	((2 * inc) * (2 * inc + 1));
    app = app + diff;
    inc++;
    wcet += 3;
    i++;
  }

  return app;
}


int my_cos(int rad)
{
  wcet += 1;
  return (my_sin (PI / 2 - rad));
}


/* MAX: 1 */
int encode(int xin1,int xin2)
{
    int i;
    int *h_ptr,*tqmf_ptr,*tqmf_ptr1;
    long int xa,xb;
    int decis;
    klee_make_symbolic(&i, sizeof(int), "i");    
    klee_make_symbolic(&h_ptr, sizeof(h_ptr), "h_ptr");
    klee_make_symbolic(&tqmf_ptr, sizeof(tqmf_ptr), "tqmf_ptr");
    klee_make_symbolic(&tqmf_ptr1, sizeof(tqmf_ptr1), "tqmf_ptr1");    
  
    klee_make_symbolic(&xa, sizeof(long int), "xa");
    klee_make_symbolic(&xb, sizeof(long int), "xb");        
    klee_make_symbolic(&decis, sizeof(int), "decis");

/* transmit quadrature mirror filters implemented here */
    h_ptr = h;
    tqmf_ptr = tqmf;
    xa = (long)(*tqmf_ptr++) * (*h_ptr++);
    xb = (long)(*tqmf_ptr++) * (*h_ptr++);
    wcet += 4;
/* main multiply accumulate loop for samples and coefficients */
    /* MAX: 10 */
    for(i = 0 ; i < 10 ; i++) {
        xa += (long)(*tqmf_ptr++) * (*h_ptr++);
        xb += (long)(*tqmf_ptr++) * (*h_ptr++);
        wcet += 2;
    }
/* final mult/accumulate */
    xa += (long)(*tqmf_ptr++) * (*h_ptr++);
    xb += (long)(*tqmf_ptr) * (*h_ptr++);
    wcet += 2;

/* update delay line tqmf */
    tqmf_ptr1 = tqmf_ptr - 2;
    wcet += 1;
    /* MAX: 22 */
    for(i = 0 ; i < 22 ; i++) {*tqmf_ptr-- = *tqmf_ptr1--;wcet += 1;}
    *tqmf_ptr-- = xin1;
    *tqmf_ptr = xin2;
    wcet += 2;

/* scale outputs */
    xl = (xa + xb) >> 15;
    xh = (xa - xb) >> 15;
    wcet += 2;

/* end of quadrature mirror filter code */

/* starting with lower sub band encoder */

/* filtez - compute predictor output section - zero section */
    szl = filtez(delay_bpl,delay_dltx);
    wcet += 1;

/* filtep - compute predictor output signal (pole section) */
    spl = filtep(rlt1,al1,rlt2,al2);
    wcet += 1;

/* compute the predictor output value in the lower sub_band encoder */
    sl = szl + spl;
    el = xl - sl;
    wcet += 2;

/* quantl: quantize the difference signal */
    il = quantl(el,detl);
    wcet += 1;

/* invqxl: computes quantized difference signal */
/* for invqbl, truncate by 2 lsbs, so mode = 3 */
    dlt = ((long)detl*qq4_code4_table[il >> 2]) >> 15;
    wcet += 1;

/* logscl: updates logarithmic quant. scale factor in low sub band */
    nbl = logscl(il,nbl);
    wcet += 1;

/* scalel: compute the quantizer scale factor in the lower sub band */
/* calling parameters nbl and 8 (constant such that scalel can be scaleh) */
    detl = scalel(nbl,8);
    wcet += 1;

/* parrec - simple addition to compute recontructed signal for adaptive pred */
    plt = dlt + szl;
    wcet += 1;

/* upzero: update zero section predictor coefficients (sixth order)*/
/* calling parameters: dlt, dlt1, dlt2, ..., dlt6 from dlt */
/*  bpli (linear_buffer in which all six values are delayed */
/* return params:      updated bpli, delayed dltx */
    upzero(dlt,delay_dltx,delay_bpl);
    wcet += 1;

/* uppol2- update second predictor coefficient apl2 and delay it as al2 */
/* calling parameters: al1, al2, plt, plt1, plt2 */
    al2 = uppol2(al1,al2,plt,plt1,plt2);
    wcet += 1;

/* uppol1 :update first predictor coefficient apl1 and delay it as al1 */
/* calling parameters: al1, apl2, plt, plt1 */
    al1 = uppol1(al1,al2,plt,plt1);
    wcet += 1;

/* recons : compute recontructed signal for adaptive predictor */
    rlt = sl + dlt;

/* done with lower sub_band encoder; now implement delays for next time*/
    rlt2 = rlt1;
    rlt1 = rlt;
    plt2 = plt1;
    plt1 = plt;
    wcet += 4;

/* high band encode */

    szh = filtez(delay_bph,delay_dhx);
    wcet += 1;

    sph = filtep(rh1,ah1,rh2,ah2);
    wcet += 1;

/* predic: sh = sph + szh */
    sh = sph + szh;
    wcet += 1;
/* subtra: eh = xh - sh */
    eh = xh - sh;
    wcet += 1;

/* quanth - quantization of difference signal for higher sub-band */
/* quanth: in-place for speed params: eh, deth (has init. value) */
    if(eh >= 0) {
        ih = 3;     /* 2,3 are pos codes */
        wcet += 1;
    }
    else {
        ih = 1;     /* 0,1 are neg codes */
        wcet += 1;
    }
    decis = (564L*(long)deth) >> 12L;
    if(my_abs(eh) > decis) ih--;     /* mih = 2 case */
    wcet += 2;

/* invqah: compute the quantized difference signal, higher sub-band*/
    dh = ((long)deth*qq2_code2_table[ih]) >> 15L ;
    wcet += 1;

/* logsch: update logarithmic quantizer scale factor in hi sub-band*/
    nbh = logsch(ih,nbh);
    wcet += 1;

/* note : scalel and scaleh use same code, different parameters */
    deth = scalel(nbh,10);
    wcet += 1;

/* parrec - add pole predictor output to quantized diff. signal */
    ph = dh + szh;
    wcet += 1;

/* upzero: update zero section predictor coefficients (sixth order) */
/* calling parameters: dh, dhi, bphi */
/* return params: updated bphi, delayed dhx */
    upzero(dh,delay_dhx,delay_bph);
    wcet += 1;

/* uppol2: update second predictor coef aph2 and delay as ah2 */
/* calling params: ah1, ah2, ph, ph1, ph2 */
    ah2 = uppol2(ah1,ah2,ph,ph1,ph2);
    wcet += 1;

/* uppol1:  update first predictor coef. aph2 and delay it as ah1 */
    ah1 = uppol1(ah1,ah2,ph,ph1);
    wcet += 1;

/* recons for higher sub-band */
    yh = sh + dh;
    wcet += 1;

/* done with higher sub-band encoder, now Delay for next time */
    rh2 = rh1;
    rh1 = yh;
    ph2 = ph1;
    ph1 = ph;
    wcet += 4;

/* multiplex ih and il to get signals together */
    return(il | (ih << 6));
}

/* decode function, result in xout1 and xout2 */

void decode(int input)
{
    int i;
    long int xa1,xa2;    /* qmf accumulators */
    int *h_ptr,*ac_ptr,*ac_ptr1,*ad_ptr,*ad_ptr1;
    klee_make_symbolic(&i, sizeof(int), "i");    
    klee_make_symbolic(&xa1, sizeof(long int), "xa1");
    klee_make_symbolic(&xa2, sizeof(long int), "xa2");            
    klee_make_symbolic(&h_ptr, sizeof(h_ptr), "h_ptr");
    klee_make_symbolic(&ac_ptr, sizeof(ac_ptr), "ac_ptr");
    klee_make_symbolic(&ac_ptr1, sizeof(ac_ptr1), "ac_ptr1");
    klee_make_symbolic(&ad_ptr, sizeof(ad_ptr), "ad_ptr");
    klee_make_symbolic(&ad_ptr1, sizeof(ad_ptr1), "ad_ptr1");            

/* split transmitted word from input into ilr and ih */
    ilr = input & 0x3f;
    ih = input >> 6;
    wcet += 2;

/* LOWER SUB_BAND DECODER */

/* filtez: compute predictor output for zero section */
    dec_szl = filtez(dec_del_bpl,dec_del_dltx);
    wcet += 1;

/* filtep: compute predictor output signal for pole section */
    dec_spl = filtep(dec_rlt1,dec_al1,dec_rlt2,dec_al2);
    wcet += 1;

    dec_sl = dec_spl + dec_szl;
    wcet += 1;

/* invqxl: compute quantized difference signal for adaptive predic */
    dec_dlt = ((long)dec_detl*qq4_code4_table[ilr >> 2]) >> 15;
    wcet += 1;

/* invqxl: compute quantized difference signal for decoder output */
    dl = ((long)dec_detl*qq6_code6_table[il]) >> 15;
    wcet += 1;

    rl = dl + dec_sl;
    wcet += 1;

/* logscl: quantizer scale factor adaptation in the lower sub-band */
    dec_nbl = logscl(ilr,dec_nbl);
    wcet += 1;

/* scalel: computes quantizer scale factor in the lower sub band */
    dec_detl = scalel(dec_nbl,8);
    wcet += 1;

/* parrec - add pole predictor output to quantized diff. signal */
/* for partially reconstructed signal */
    dec_plt = dec_dlt + dec_szl;
    wcet += 1;

/* upzero: update zero section predictor coefficients */
    upzero(dec_dlt,dec_del_dltx,dec_del_bpl);
    wcet += 1;

/* uppol2: update second predictor coefficient apl2 and delay it as al2 */
    dec_al2 = uppol2(dec_al1,dec_al2,dec_plt,dec_plt1,dec_plt2);
    wcet += 1;

/* uppol1: update first predictor coef. (pole setion) */
    dec_al1 = uppol1(dec_al1,dec_al2,dec_plt,dec_plt1);
    wcet += 1;

/* recons : compute recontructed signal for adaptive predictor */
    dec_rlt = dec_sl + dec_dlt;
    wcet += 1;

/* done with lower sub band decoder, implement delays for next time */
    dec_rlt2 = dec_rlt1;
    dec_rlt1 = dec_rlt;
    dec_plt2 = dec_plt1;
    dec_plt1 = dec_plt;
    wcet += 4;

/* HIGH SUB-BAND DECODER */

/* filtez: compute predictor output for zero section */
    dec_szh = filtez(dec_del_bph,dec_del_dhx);
    wcet += 1;

/* filtep: compute predictor output signal for pole section */
    dec_sph = filtep(dec_rh1,dec_ah1,dec_rh2,dec_ah2);
    wcet += 1;

/* predic:compute the predictor output value in the higher sub_band decoder */
    dec_sh = dec_sph + dec_szh;
    wcet += 1;

/* invqah: in-place compute the quantized difference signal */
    dec_dh = ((long)dec_deth*qq2_code2_table[ih]) >> 15L ;
    wcet += 1;

/* logsch: update logarithmic quantizer scale factor in hi sub band */
    dec_nbh = logsch(ih,dec_nbh);
    wcet += 1;

/* scalel: compute the quantizer scale factor in the higher sub band */
    dec_deth = scalel(dec_nbh,10);
    wcet += 1;

/* parrec: compute partially recontructed signal */
    dec_ph = dec_dh + dec_szh;
    wcet += 1;

/* upzero: update zero section predictor coefficients */
    upzero(dec_dh,dec_del_dhx,dec_del_bph);
    wcet += 1;

/* uppol2: update second predictor coefficient aph2 and delay it as ah2 */
    dec_ah2 = uppol2(dec_ah1,dec_ah2,dec_ph,dec_ph1,dec_ph2);
    wcet += 1;

/* uppol1: update first predictor coef. (pole setion) */
    dec_ah1 = uppol1(dec_ah1,dec_ah2,dec_ph,dec_ph1);
    wcet += 1;

/* recons : compute recontructed signal for adaptive predictor */
    rh = dec_sh + dec_dh;
    wcet += 1;

/* done with high band decode, implementing delays for next time here */
    dec_rh2 = dec_rh1;
    dec_rh1 = rh;
    dec_ph2 = dec_ph1;
    dec_ph1 = dec_ph;
    wcet += 4;

/* end of higher sub_band decoder */

/* end with receive quadrature mirror filters */
    xd = rl - rh;
    xs = rl + rh;
    wcet += 2;

/* receive quadrature mirror filters implemented here */
    h_ptr = h;
    ac_ptr = accumc;
    ad_ptr = accumd;
    xa1 = (long)xd * (*h_ptr++);
    xa2 = (long)xs * (*h_ptr++);
    wcet += 5;
/* main multiply accumulate loop for samples and coefficients */
    for(i = 0 ; i < 10 ; i++) {
        xa1 += (long)(*ac_ptr++) * (*h_ptr++);
        xa2 += (long)(*ad_ptr++) * (*h_ptr++);
        wcet += 2;
    }
/* final mult/accumulate */
    xa1 += (long)(*ac_ptr) * (*h_ptr++);
    xa2 += (long)(*ad_ptr) * (*h_ptr++);
    wcet += 2;

/* scale by 2^14 */
    xout1 = xa1 >> 14;
    xout2 = xa2 >> 14;
    wcet += 2;

/* update delay lines */
    ac_ptr1 = ac_ptr - 1;
    ad_ptr1 = ad_ptr - 1;
    wcet += 2;
    for(i = 0 ; i < 10 ; i++) {
        *ac_ptr-- = *ac_ptr1--;
        *ad_ptr-- = *ad_ptr1--;
        wcet += 2;
    }
    *ac_ptr = xd;
    *ad_ptr = xs;
    wcet += 2;

    return;
}

/* clear all storage locations */

void reset()
{
    int i;
    klee_make_symbolic(&i, sizeof(int), "i");    
    

    detl = dec_detl = 32; 
    deth = dec_deth = 8;
    nbl = al1 = al2 = plt1 = plt2 = rlt1 = rlt2 = 0;
    nbh = ah1 = ah2 = ph1 = ph2 = rh1 = rh2 = 0;
    dec_nbl = dec_al1 = dec_al2 = dec_plt1 = dec_plt2 = dec_rlt1 = dec_rlt2 = 0;
    dec_nbh = dec_ah1 = dec_ah2 = dec_ph1 = dec_ph2 = dec_rh1 = dec_rh2 = 0;
    wcet += 6;

    for(i = 0 ; i < 6 ; i++) {
        delay_dltx[i] = 0;
        delay_dhx[i] = 0;
        dec_del_dltx[i] = 0;
        dec_del_dhx[i] = 0;
        wcet += 4;
    }

    for(i = 0 ; i < 6 ; i++) {
        delay_bpl[i] = 0;
        delay_bph[i] = 0;
        dec_del_bpl[i] = 0;
        dec_del_bph[i] = 0;
        wcet += 4;
    }

    for(i = 0 ; i < 23 ; i++) {tqmf[i] = 0;wcet += 1;}

    for(i = 0 ; i < 11 ; i++) {
        accumc[i] = 0;
        accumd[i] = 0;
        wcet += 2;
    }
    return;
}

/* filtez - compute predictor output signal (zero section) */
/* input: bpl1-6 and dlt1-6, output: szl */

int filtez(int *bpl,int *dlt)
{
    int i;
    long int zl;
    klee_make_symbolic(&i, sizeof(int), "i");
    klee_make_symbolic(&zl, sizeof(long int), "zl");            

    zl = (long)(*bpl++) * (*dlt++);
    wcet += 1;
    /* MAX: 6 */
    for(i = 1 ; i < 6 ; i++){
        zl += (long)(*bpl++) * (*dlt++);wcet += 1;
    }

    return((int)(zl >> 14));   /* x2 here */
}

/* filtep - compute predictor output signal (pole section) */
/* input rlt1-2 and al1-2, output spl */

int filtep(int rlt1,int al1,int rlt2,int al2)
{
    long int pl,pl2;
    klee_make_symbolic(&pl, sizeof(long int), "pl");            
    klee_make_symbolic(&pl2, sizeof(long int), "pl2");            
    
    pl = 2*rlt1;
    pl = (long)al1*pl;
    pl2 = 2*rlt2;
    pl += (long)al2*pl2;
    wcet += 4;
    return((int)(pl >> 15));
}

/* quantl - quantize the difference signal in the lower sub-band */
int quantl(int el,int detl)
{
    int ril,mil;
    long int wd,decis;
    klee_make_symbolic(&ril, sizeof(int), "ril");            
    klee_make_symbolic(&mil, sizeof(int), "mil");            
    klee_make_symbolic(&wd, sizeof(long int), "wd");            
    klee_make_symbolic(&decis, sizeof(long int), "decis");

/* abs of difference signal */
    wd = my_abs(el);
    wcet += 1;
/* determine mil based on decision levels and detl gain */
    /* MAX: 30 */
    for(mil = 0 ; mil < 30 ; mil++) {
        decis = (decis_levl[mil]*(long)detl) >> 15L;
        wcet += 1;
        if(wd <= decis){ wcet += 1;break;}
    }
/* if mil=30 then wd is less than all decision levels */
    if(el >= 0){ ril = quant26bt_pos[mil];wcet += 1;}
    else {ril = quant26bt_neg[mil];wcet += 1;}
    return(ril);
}

/* invqxl is either invqbl or invqal depending on parameters passed */
/* returns dlt, code table is pre-multiplied by 8 */

/*    int invqxl(int il,int detl,int *code_table,int mode) */
/*    { */
/*        long int dlt; */
/*       dlt = (long)detl*code_table[il >> (mode-1)]; */
/*        return((int)(dlt >> 15)); */
/*    } */

/* logscl - update log quantizer scale factor in lower sub-band */
/* note that nbl is passed and returned */

int logscl(int il,int nbl)
{
    long int wd;
    klee_make_symbolic(&wd, sizeof(long int), "wd");            
    
    wd = ((long)nbl * 127L) >> 7L;   /* leak factor 127/128 */
    nbl = (int)wd + wl_code_table[il >> 2];
    wcet += 2;
    if(nbl < 0) {nbl = 0;wcet += 1;}
    if(nbl > 18432) {nbl = 18432;wcet += 1;}
    return(nbl);
}

/* scalel: compute quantizer scale factor in lower or upper sub-band*/

int scalel(int nbl,int shift_constant)
{
    int wd1,wd2,wd3;
    klee_make_symbolic(&wd1, sizeof(int), "wd1");            
    klee_make_symbolic(&wd2, sizeof(int), "wd2");            
    klee_make_symbolic(&wd3, sizeof(int), "wd3");            
           
    wd1 = (nbl >> 6) & 31;
    wd2 = nbl >> 11;
    wd3 = ilb_table[wd1] >> (shift_constant + 1 - wd2);
    wcet += 1;
    return(wd3 << 3);
}

/* upzero - inputs: dlt, dlti[0-5], bli[0-5], outputs: updated bli[0-5] */
/* also implements delay of bli and update of dlti from dlt */

void upzero(int dlt,int *dlti,int *bli)
{
    int i,wd2,wd3;
    klee_make_symbolic(&i, sizeof(int), "i");            
    klee_make_symbolic(&wd2, sizeof(int), "wd2");            
    klee_make_symbolic(&wd3, sizeof(int), "wd3"); 
        
/*if dlt is zero, then no sum into bli */
    if(dlt == 0) {
      for(i = 0 ; i < 6 ; i++) {
        bli[i] = (int)((255L*bli[i]) >> 8L);wcet += 1; /* leak factor of 255/256 */
      }
    }
    else {
      for(i = 0 ; i < 6 ; i++) {
        if((long)dlt*dlti[i] >= 0) {wd2 = 128;wcet += 1;} else {wd2 = -128;wcet += 1;}
        wd3 = (int)((255L*bli[i]) >> 8L);    /* leak factor of 255/256 */
        bli[i] = wd2 + wd3;
        wcet += 2;
      }
    }
/* implement delay line for dlt */
    dlti[5] = dlti[4];
    dlti[4] = dlti[3];
    dlti[3] = dlti[2];
    dlti[1] = dlti[0];
    dlti[0] = dlt;
    wcet += 1;
    return;
}

/* uppol2 - update second predictor coefficient (pole section) */
/* inputs: al1, al2, plt, plt1, plt2. outputs: apl2 */

int uppol2(int al1,int al2,int plt,int plt1,int plt2)
{
    long int wd2,wd4;
    int apl2;
    klee_make_symbolic(&wd2, sizeof(long int), "wd2");            
    klee_make_symbolic(&wd4, sizeof(long int), "wd4"); 
    klee_make_symbolic(&apl2, sizeof(int), "apl2");                
        
    wd2 = 4L*(long)al1;
    wcet += 1;
    if((long)plt*plt1 >= 0L) {wd2 = -wd2;wcet += 1;}    /* check same sign */
    wd2 = wd2 >> 7;                  /* gain of 1/128 */
    wcet += 1;
    if((long)plt*plt2 >= 0L) {
        wd4 = wd2 + 128;   wcet += 1;          /* same sign case */
    }
    else {
        wd4 = wd2 - 128;wcet += 1;
    }
    apl2 = wd4 + (127L*(long)al2 >> 7L);  /* leak factor of 127/128 */
    wcet += 1;
    
/* apl2 is limited to +-.75 */
    if(apl2 > 12288) {apl2 = 12288;wcet += 1;}
    if(apl2 < -12288) {apl2 = -12288;wcet += 1;}
    return(apl2);
}

/* uppol1 - update first predictor coefficient (pole section) */
/* inputs: al1, apl2, plt, plt1. outputs: apl1 */

int uppol1(int al1,int apl2,int plt,int plt1)
{
    long int wd2;
    int wd3,apl1;
    klee_make_symbolic(&wd2, sizeof(long int), "wd2");            
    klee_make_symbolic(&wd3, sizeof(int), "wd3"); 
    klee_make_symbolic(&apl1, sizeof(int), "apl1"); 
        
    wd2 = ((long)al1*255L) >> 8L;   /* leak factor of 255/256 */
    wcet += 1;
    if((long)plt*plt1 >= 0L) {
        apl1 = (int)wd2 + 192;wcet += 1;      /* same sign case */
    }
    else {
        apl1 = (int)wd2 - 192;wcet += 1;
    }
/* note: wd3= .9375-.75 is always positive */
    wd3 = 15360 - apl2;             /* limit value */
    wcet += 1;
    if(apl1 > wd3) {apl1 = wd3;wcet += 1;}
    if(apl1 < -wd3) {apl1 = -wd3;wcet += 1;}
    return(apl1);
}

/* INVQAH: inverse adaptive quantizer for the higher sub-band */
/* returns dh, code table is pre-multiplied by 8 */

/*  int invqah(int ih,int deth) */
/*  { */
/*        long int rdh; */
/*        rdh = ((long)deth*qq2_code2_table[ih]) >> 15L ; */
/*        return((int)(rdh )); */
/*  } */

/* logsch - update log quantizer scale factor in higher sub-band */
/* note that nbh is passed and returned */

int logsch(int ih,int nbh)
{
    int wd;
    klee_make_symbolic(&wd, sizeof(int), "wd"); 
    
    wd = ((long)nbh * 127L) >> 7L;       /* leak factor 127/128 */
    nbh = wd + wh_code_table[ih];
    wcet += 2;
    if(nbh < 0) {nbh = 0; wcet += 1;}
    if(nbh > 22528) {nbh = 22528; wcet += 1;}
    return(nbh);
}


#ifndef Seoul_Mate

int main()
{
  klee_make_symbolic(tqmf, 24 * sizeof(int), "tqmf");
  klee_make_symbolic(&xl, sizeof(int), "xl");
  klee_make_symbolic(&xh, sizeof(int), "xh");

  klee_make_symbolic(accumc, 11 * sizeof(int), "accumc");
  klee_make_symbolic(accumd, 11 * sizeof(int), "accumd");
  
  klee_make_symbolic(&xout1, sizeof(int), "xout1");
  klee_make_symbolic(&xout2, sizeof(int), "xout2");
  
  klee_make_symbolic(&xs, sizeof(int), "xs");
  klee_make_symbolic(&xd, sizeof(int), "xd");
  
  klee_make_symbolic(&il, sizeof(int), "il");
  klee_make_symbolic(&szl, sizeof(int), "szl");
  klee_make_symbolic(&spl, sizeof(int), "spl");
  klee_make_symbolic(&sl, sizeof(int), "sl");
  klee_make_symbolic(&el, sizeof(int), "el");  
  
  klee_make_symbolic(delay_bpl, 6 * sizeof(int), "delay_bpl");
  klee_make_symbolic(delay_dltx, 6 * sizeof(int), "delay_dltx");

  klee_make_symbolic(&nbl, sizeof(int), "nbl");
  
  klee_make_symbolic(&al1, sizeof(int), "al1");
  klee_make_symbolic(&al2, sizeof(int), "al2");
  
  klee_make_symbolic(&plt, sizeof(int), "plt");
  klee_make_symbolic(&plt1, sizeof(int), "plt1");
  klee_make_symbolic(&plt2, sizeof(int), "plt2");    


  klee_make_symbolic(&rs, sizeof(int), "rs");
  
  klee_make_symbolic(&dlt, sizeof(int), "dlt");
  
  klee_make_symbolic(&rlt, sizeof(int), "rlt");    
  klee_make_symbolic(&rlt1, sizeof(int), "rlt1");
  klee_make_symbolic(&rlt2, sizeof(int), "rlt2");
  
  klee_make_symbolic(&detl, sizeof(int), "detl");
      
  klee_make_symbolic(&deth, sizeof(int), "deth");
  
  klee_make_symbolic(&sh, sizeof(int), "sh");
  
  klee_make_symbolic(&eh, sizeof(int), "eh");    
  
  klee_make_symbolic(&dh, sizeof(int), "dh");
  
  klee_make_symbolic(&ih, sizeof(int), "ih");  
  
  klee_make_symbolic(&nbh, sizeof(int), "nbh");
  klee_make_symbolic(&szh, sizeof(int), "szh");
  
  klee_make_symbolic(&sph, sizeof(int), "sph");    
  klee_make_symbolic(&ph, sizeof(int), "ph");
  klee_make_symbolic(&yh, sizeof(int), "yh");
  klee_make_symbolic(&rh, sizeof(int), "rh");

  klee_make_symbolic(delay_dhx, 6 * sizeof(int), "delay_dhx");
  klee_make_symbolic(delay_bph, 6 * sizeof(int), "delay_bph");  
  
  klee_make_symbolic(&ah1, sizeof(int), "ah1");    
  klee_make_symbolic(&ah2, sizeof(int), "ah2");
  klee_make_symbolic(&ph1, sizeof(int), "ph1");
  klee_make_symbolic(&ph2, sizeof(int), "ph2");
  klee_make_symbolic(&rh1, sizeof(int), "rh1");
  klee_make_symbolic(&rh2, sizeof(int), "rh2");  
  
  klee_make_symbolic(&ilr, sizeof(int), "ilr");    
  klee_make_symbolic(&yl, sizeof(int), "yl");
  klee_make_symbolic(&rl, sizeof(int), "rl");
  klee_make_symbolic(&dec_deth, sizeof(int), "dec_deth");
  klee_make_symbolic(&dec_detl, sizeof(int), "dec_detl");
  klee_make_symbolic(&dec_dlt, sizeof(int), "dec_dlt");
  
  klee_make_symbolic(dec_del_bpl, 6 * sizeof(int), "dec_del_bpl");
  klee_make_symbolic(dec_del_dltx, 6 * sizeof(int), "dec_del_dltx");  
  
  klee_make_symbolic(&dec_plt, sizeof(int), "dec_plt");    
  klee_make_symbolic(&dec_plt1, sizeof(int), "dec_plt1");
  klee_make_symbolic(&dec_plt2, sizeof(int), "dec_plt2");
  klee_make_symbolic(&dec_szl, sizeof(int), "dec_szl");
  klee_make_symbolic(&dec_spl, sizeof(int), "dec_spl");
  klee_make_symbolic(&dec_sl, sizeof(int), "dec_sl");  
  
  klee_make_symbolic(&dec_rlt1, sizeof(int), "dec_rlt1");    
  klee_make_symbolic(&dec_rlt2, sizeof(int), "dec_rlt2");
  klee_make_symbolic(&dec_rlt, sizeof(int), "dec_rlt");
  klee_make_symbolic(&dec_al1, sizeof(int), "dec_al1");
  klee_make_symbolic(&dec_al2, sizeof(int), "dec_al2");    
  
  klee_make_symbolic(&dl, sizeof(int), "dl");    
  klee_make_symbolic(&dec_nbl, sizeof(int), "dec_nbl");
  klee_make_symbolic(&dec_yh, sizeof(int), "dec_yh");
  klee_make_symbolic(&dec_dh, sizeof(int), "dec_dh");
  klee_make_symbolic(&dec_nbh, sizeof(int), "dec_nbh");    
  
  klee_make_symbolic(dec_del_bph, 6 * sizeof(int), "dec_del_bph");
  klee_make_symbolic(dec_del_dhx, 6 * sizeof(int), "dec_del_dhx");  
  
  klee_make_symbolic(&dec_szh, sizeof(int), "dec_szh");    
  klee_make_symbolic(&dec_rh1, sizeof(int), "dec_rh1");
  klee_make_symbolic(&dec_rh2, sizeof(int), "dec_rh2");
  klee_make_symbolic(&dec_ah1, sizeof(int), "dec_ah1");
  klee_make_symbolic(&dec_ah2, sizeof(int), "dec_ah2");    

  klee_make_symbolic(&dec_ph, sizeof(int), "dec_ph");    
  klee_make_symbolic(&dec_sph, sizeof(int), "dec_sph");
  klee_make_symbolic(&dec_sh, sizeof(int), "dec_sh");
  klee_make_symbolic(&dec_rh, sizeof(int), "dec_rh");
  klee_make_symbolic(&dec_ph1, sizeof(int), "dec_ph1");
  klee_make_symbolic(&dec_ph2, sizeof(int), "dec_ph2");              
    
    wcet = 0;
    int i,j,f/*,answer*/;
    klee_make_symbolic(&i, sizeof(int), "i");
    klee_make_symbolic(&j, sizeof(int), "j");
    klee_make_symbolic(&f, sizeof(int), "f");    
    
    static int test_data[SIZE*2],compressed[SIZE],result[SIZE*2];

     reset();

     j = 10; f = 2000;  wcet += 2;

    for(i = 0 ; i < SIZE ; i++) {
              test_data[i] = (int)j*my_cos(f*PI*i); wcet += 1;
    }

   for(i = 0 ; i < IN_END ; i += 2){
      compressed[i/2] = encode(test_data[i],test_data[i+1]);wcet += 1;
   }

   for(i = 0 ; i < IN_END ; i += 2) {
      decode(compressed[i/2]);
      result[i] = xout1;
      result[i+1] = xout2;
      wcet += 3;
    }

    tracerx_check();
    return result[i]+result[i+1];
}
#endif




